name: Deploy LS100

on:
  push:
    branches: [main]
    paths-ignore:
      - 'research/**'
      - '**/*.md'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    environment: ls100
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Upload infra deploy scripts
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "infra/deploy"
          target: "/tmp/ls100-deploy"
      
      - name: Deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # refresh infra scripts to /home/ls100/infra
            rm -rf /home/ls100/infra
            mkdir -p /home/ls100
            cp -r /tmp/ls100-deploy/infra /home/ls100/
            chmod +x /home/ls100/infra/deploy/deploy.js
            if [ "${{ github.event_name }}" = "release" ]; then
              node /home/ls100/infra/deploy/deploy.js production "${{ github.sha }}" "git@github.com:${{ github.repository }}.git"
            elif [ "${{ github.event.inputs.environment }}" = "production" ]; then
              node /home/ls100/infra/deploy/deploy.js production "${{ github.sha }}" "git@github.com:${{ github.repository }}.git"
            else
              node /home/ls100/infra/deploy/deploy.js staging "${{ github.sha }}" "git@github.com:${{ github.repository }}.git"
            fi

      - name: Verify server build and status
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # determine environment
            if [ "${{ github.event_name }}" = "release" ]; then
              ENV=production
              APP=ls100-production
            elif [ "${{ github.event.inputs.environment }}" = "production" ]; then
              ENV=production
              APP=ls100-production
            else
              ENV=staging
              APP=ls100-staging
            fi
            CURR="/home/ls100/$ENV/current"
            echo "Current symlink: $CURR -> $(readlink -f "$CURR")"
            echo -n "REV: "; cat "$CURR/REV" || true
            # verify client build artifact exists
            if [ -f "$CURR/client/dist/index.html" ]; then
              ls -lh "$CURR/client/dist/index.html"
            else
              echo "client/dist/index.html missing" && exit 1
            fi
            # verify pm2 app is online
            if pm2 describe "$APP" | grep -q online; then
              echo "PM2 $APP online"
            else
              echo "PM2 $APP not online" && exit 1
            fi